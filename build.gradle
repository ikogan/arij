buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.2'
    }
}

apply plugin: 'android'

repositories {
    mavenCentral()
    maven {
        url "https://github.com/skyisle/mvn-repo/raw/master"
    }
}

configurations {
    apt
}

dependencies {
    compile 'com.actionbarsherlock:actionbarsherlock:4.3.2-SNAPSHOT'
    compile "com.google.guava:guava:12.0.1"
    compile "com.squareup.retrofit:retrofit:1.1.1"
    compile "org.ocpsoft.prettytime:prettytime:3.0.2.Final"
    compile "com.googlecode.androidannotations:androidannotations-api:2.7.1"
    apt "com.googlecode.androidannotations:androidannotations:2.7.1"
    compile files("libs/analytics-2.jar");
    compile files("libs/android-support-v4.jar");
}



android {
    compileSdkVersion 17
    buildToolsVersion "18.0.0"
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
        }
    }
    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 17
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}

def getSourceSetName(variant) {
    return new File(variant.dirName).getName();
}

android.applicationVariants.each { variant ->
    def aptOutputDir = project.file("build/source/apt")
    def aptOutput = new File(aptOutputDir, variant.dirName)
    println "****************************"
    println "variant: ${variant.name}"
    println "manifest:  ${variant.processResources.manifestFile}"
    println "aptOutput:  ${aptOutput}"
    println "****************************"

    android.sourceSets[getSourceSetName(variant)].java.srcDirs+= aptOutput.getPath()

    variant.javaCompile.options.compilerArgs += [
            '-processorpath', configurations.apt.getAsPath(),
            '-AandroidManifestFile=' + variant.processResources.manifestFile,
            '-s', aptOutput
    ]

    variant.javaCompile.source = variant.javaCompile.source.filter { p ->
        return !p.getPath().startsWith(aptOutputDir.getPath())
    }

    variant.javaCompile.doFirst {
        aptOutput.mkdirs()
    }
}